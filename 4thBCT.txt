// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {

    // Declare a mapping to store the balance of each customer by their address
    mapping(address => uint) private balances;

    // Event to emit when a deposit is made
    event Deposit(address indexed customer, uint amount);

    // Event to emit when a withdrawal is made
    event Withdrawal(address indexed customer, uint amount);

    // Function to deposit money into the bank account
    function deposit() public payable {
        // Ensure the deposit is greater than zero
        require(msg.value > 0, "Deposit amount must be greater than zero.");
        
        // Add the deposited amount to the customer's balance
        balances[msg.sender] += msg.value;

        // Emit the Deposit event
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw money from the bank account
    function withdraw(uint _amount) public {
        // Check that the customer has enough balance to withdraw
        require(balances[msg.sender] >= _amount, "Insufficient balance.");

        // Subtract the amount from the customer's balance
        balances[msg.sender] -= _amount;

        // Transfer the amount to the customer's address
        payable(msg.sender).transfer(_amount);

        // Emit the Withdrawal event
        emit Withdrawal(msg.sender, _amount);
    }

    // Function to get the balance of the customer's account
    function checkBalance() public view returns (uint) {
        return balances[msg.sender];
    }
}
